"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _excluded = ["children", "className", "disabled", "disabledClassName", "focus", "id", "panelId", "selected", "selectedClassName", "tabIndex", "tabRef"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DEFAULT_CLASS = 'react-tabs__tab';
var DEFAULT_PROPS = {
  className: DEFAULT_CLASS,
  disabledClassName: DEFAULT_CLASS + "--disabled",
  focus: false,
  id: null,
  panelId: null,
  selected: false,
  selectedClassName: DEFAULT_CLASS + "--selected"
};
var propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object, _propTypes["default"].string]),
  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object]),
  disabled: _propTypes["default"].bool,
  disabledClassName: _propTypes["default"].string,
  focus: _propTypes["default"].bool,
  // private
  id: _propTypes["default"].string,
  // private
  panelId: _propTypes["default"].string,
  // private
  selected: _propTypes["default"].bool,
  // private
  selectedClassName: _propTypes["default"].string,
  tabIndex: _propTypes["default"].string,
  tabRef: _propTypes["default"].func // private

} : {};

var Tab = function Tab(props) {
  var _cx;

  var nodeRef = (0, _react.useRef)();

  var children = props.children,
      className = props.className,
      disabled = props.disabled,
      disabledClassName = props.disabledClassName,
      focus = props.focus,
      id = props.id,
      panelId = props.panelId,
      selected = props.selected,
      selectedClassName = props.selectedClassName,
      tabIndex = props.tabIndex,
      tabRef = props.tabRef,
      attributes = _objectWithoutPropertiesLoose(props, _excluded);

  (0, _react.useEffect)(function () {
    if (selected && focus) {
      nodeRef.current.focus();
    }
  }, [selected, focus]);
  return /*#__PURE__*/_react["default"].createElement("li", _extends({}, attributes, {
    className: (0, _clsx["default"])(className, (_cx = {}, _cx[selectedClassName] = selected, _cx[disabledClassName] = disabled, _cx)),
    ref: function ref(node) {
      nodeRef.current = node;
      if (tabRef) tabRef(node);
    },
    role: "tab",
    id: id,
    "aria-selected": selected ? 'true' : 'false',
    "aria-disabled": disabled ? 'true' : 'false',
    "aria-controls": panelId,
    tabIndex: tabIndex || (selected ? '0' : null),
    "data-rttab": true
  }), children);
};

Tab.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
Tab.tabsRole = 'Tab';
Tab.defaultProps = DEFAULT_PROPS;
var _default = Tab;
exports["default"] = _default;