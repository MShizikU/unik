var _excluded = ["children", "className", "forceRender", "id", "selected", "selectedClassName", "tabId"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import cx from 'clsx';
var DEFAULT_CLASS = 'react-tabs__tab-panel';
var defaultProps = {
  className: DEFAULT_CLASS,
  forceRender: false,
  selectedClassName: DEFAULT_CLASS + "--selected"
};
var propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.node,
  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),
  forceRender: PropTypes.bool,
  id: PropTypes.string,
  // private
  selected: PropTypes.bool,
  // private
  selectedClassName: PropTypes.string,
  tabId: PropTypes.string // private

} : {};

var TabPanel = function TabPanel(props) {
  var _cx;

  var children = props.children,
      className = props.className,
      forceRender = props.forceRender,
      id = props.id,
      selected = props.selected,
      selectedClassName = props.selectedClassName,
      tabId = props.tabId,
      attributes = _objectWithoutPropertiesLoose(props, _excluded);

  return /*#__PURE__*/React.createElement("div", _extends({}, attributes, {
    className: cx(className, (_cx = {}, _cx[selectedClassName] = selected, _cx)),
    role: "tabpanel",
    id: id,
    "aria-labelledby": tabId
  }), forceRender || selected ? children : null);
};

TabPanel.tabsRole = 'TabPanel';
TabPanel.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
TabPanel.defaultProps = defaultProps;
export default TabPanel;