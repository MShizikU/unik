var _excluded = ["children", "className", "disabled", "disabledClassName", "focus", "id", "panelId", "selected", "selectedClassName", "tabIndex", "tabRef"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import PropTypes from 'prop-types';
import React, { useEffect, useRef } from 'react';
import cx from 'clsx';
var DEFAULT_CLASS = 'react-tabs__tab';
var DEFAULT_PROPS = {
  className: DEFAULT_CLASS,
  disabledClassName: DEFAULT_CLASS + "--disabled",
  focus: false,
  id: null,
  panelId: null,
  selected: false,
  selectedClassName: DEFAULT_CLASS + "--selected"
};
var propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),
  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),
  disabled: PropTypes.bool,
  disabledClassName: PropTypes.string,
  focus: PropTypes.bool,
  // private
  id: PropTypes.string,
  // private
  panelId: PropTypes.string,
  // private
  selected: PropTypes.bool,
  // private
  selectedClassName: PropTypes.string,
  tabIndex: PropTypes.string,
  tabRef: PropTypes.func // private

} : {};

var Tab = function Tab(props) {
  var _cx;

  var nodeRef = useRef();

  var children = props.children,
      className = props.className,
      disabled = props.disabled,
      disabledClassName = props.disabledClassName,
      focus = props.focus,
      id = props.id,
      panelId = props.panelId,
      selected = props.selected,
      selectedClassName = props.selectedClassName,
      tabIndex = props.tabIndex,
      tabRef = props.tabRef,
      attributes = _objectWithoutPropertiesLoose(props, _excluded);

  useEffect(function () {
    if (selected && focus) {
      nodeRef.current.focus();
    }
  }, [selected, focus]);
  return /*#__PURE__*/React.createElement("li", _extends({}, attributes, {
    className: cx(className, (_cx = {}, _cx[selectedClassName] = selected, _cx[disabledClassName] = disabled, _cx)),
    ref: function ref(node) {
      nodeRef.current = node;
      if (tabRef) tabRef(node);
    },
    role: "tab",
    id: id,
    "aria-selected": selected ? 'true' : 'false',
    "aria-disabled": disabled ? 'true' : 'false',
    "aria-controls": panelId,
    tabIndex: tabIndex || (selected ? '0' : null),
    "data-rttab": true
  }), children);
};

Tab.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
Tab.tabsRole = 'Tab';
Tab.defaultProps = DEFAULT_PROPS;
export default Tab;