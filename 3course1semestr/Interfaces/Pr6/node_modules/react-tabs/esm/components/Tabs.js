function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import PropTypes from 'prop-types';
import React, { useEffect, useState } from 'react';
import { childrenPropType, onSelectPropType, selectedIndexPropType } from '../helpers/propTypes';
import UncontrolledTabs from './UncontrolledTabs';
import { getTabsCount } from '../helpers/count';
var MODE_CONTROLLED = 0;
var MODE_UNCONTROLLED = 1;
var propTypes = process.env.NODE_ENV !== "production" ? {
  children: childrenPropType,
  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),
  defaultFocus: PropTypes.bool,
  defaultIndex: PropTypes.number,
  direction: PropTypes.oneOf(['rtl', 'ltr']),
  disabledTabClassName: PropTypes.string,
  disableUpDownKeys: PropTypes.bool,
  domRef: PropTypes.func,
  environment: PropTypes.object,
  focusTabOnClick: PropTypes.bool,
  forceRenderTabPanel: PropTypes.bool,
  onSelect: onSelectPropType,
  selectedIndex: selectedIndexPropType,
  selectedTabClassName: PropTypes.string,
  selectedTabPanelClassName: PropTypes.string
} : {};
var defaultProps = {
  defaultFocus: false,
  focusTabOnClick: true,
  forceRenderTabPanel: false,
  selectedIndex: null,
  defaultIndex: null,
  environment: null,
  disableUpDownKeys: false
};

var getModeFromProps = function getModeFromProps(props) {
  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;
};

var checkForIllegalModeChange = function checkForIllegalModeChange(props, mode) {
  if (process.env.NODE_ENV !== 'production' && mode != undefined && mode !== getModeFromProps(props)) {
    throw new Error("Switching between controlled mode (by using `selectedIndex`) and uncontrolled mode is not supported in `Tabs`.\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.");
  }
};
/**
 * State:
 *   mode: Initialized only once from props and never changes
 *   selectedIndex: null if controlled mode, otherwise initialized with prop defaultIndex, changed on selection of tabs, has effect to ensure it never gets out of bound
 *   focus: Because we never remove focus from the Tabs this state is only used to indicate that we should focus the current tab.
 *          It is initialized from the prop defaultFocus, and after the first render it is reset back to false. Later it can become true again when using keys to navigate the tabs.
 */


var Tabs = function Tabs(props) {
  var children = props.children,
      defaultFocus = props.defaultFocus,
      defaultIndex = props.defaultIndex,
      focusTabOnClick = props.focusTabOnClick,
      onSelect = props.onSelect;

  var _useState = useState(defaultFocus),
      focus = _useState[0],
      setFocus = _useState[1];

  var _useState2 = useState(getModeFromProps(props)),
      mode = _useState2[0];

  var _useState3 = useState(mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null),
      selectedIndex = _useState3[0],
      setSelectedIndex = _useState3[1];

  useEffect(function () {
    // Reset focus after initial render, see comment above
    setFocus(false);
  }, []);

  if (mode === MODE_UNCONTROLLED) {
    // Ensure that we handle removed tabs and don't let selectedIndex get out of bounds
    var tabsCount = getTabsCount(children);
    useEffect(function () {
      if (selectedIndex != null) {
        var maxTabIndex = Math.max(0, tabsCount - 1);
        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));
      }
    }, [tabsCount]);
  }

  checkForIllegalModeChange(props, mode);

  var handleSelected = function handleSelected(index, last, event) {
    // Call change event handler
    if (typeof onSelect === 'function') {
      // Check if the change event handler cancels the tab change
      if (onSelect(index, last, event) === false) return;
    } // Always set focus on tabs unless it is disabled


    if (focusTabOnClick) {
      setFocus(true);
    }

    if (mode === MODE_UNCONTROLLED) {
      // Update selected index
      setSelectedIndex(index);
    }
  };

  var subProps = _extends({}, props);

  subProps.focus = focus;
  subProps.onSelect = handleSelected;

  if (selectedIndex != null) {
    subProps.selectedIndex = selectedIndex;
  }

  delete subProps.defaultFocus;
  delete subProps.defaultIndex;
  delete subProps.focusTabOnClick;
  return /*#__PURE__*/React.createElement(UncontrolledTabs, subProps, children);
};

Tabs.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
Tabs.defaultProps = defaultProps;
Tabs.tabsRole = 'Tabs';
export default Tabs;