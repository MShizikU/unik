"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rootRedoclyConfigSchema = exports.environmentSchema = exports.redoclyConfigSchema = exports.apiConfigSchema = exports.ssoConfigSchema = void 0;
const config_1 = require("../config");
const oidcIssuerMetadataSchema = {
    type: 'object',
    properties: {
        end_session_endpoint: { type: 'string' },
        token_endpoint: { type: 'string' },
        authorization_endpoint: { type: 'string' },
        jwks_uri: { type: 'string' },
    },
    required: ['token_endpoint', 'authorization_endpoint'],
    additionalProperties: true,
};
const oidcProviderConfigSchema = {
    type: 'object',
    properties: {
        type: { type: 'string', const: config_1.AuthProviderType.OIDC },
        title: { type: 'string' },
        configurationUrl: { type: 'string', minLength: 1 },
        configuration: oidcIssuerMetadataSchema,
        clientId: { type: 'string', minLength: 1 },
        clientSecret: { type: 'string', minLength: 1 },
        teamsClaimName: { type: 'string' },
        teamsClaimMap: { type: 'object', additionalProperties: { type: 'string' } },
        defaultTeams: { type: 'array', items: { type: 'string' } },
        scopes: { type: 'array', items: { type: 'string' } },
        tokenExpirationTime: { type: 'number' },
        authorizationRequestCustomParams: { type: 'object', additionalProperties: { type: 'string' } },
        tokenRequestCustomParams: { type: 'object', additionalProperties: { type: 'string' } },
        audience: { type: 'array', items: { type: 'string' } },
    },
    required: ['type', 'clientId', 'clientSecret'],
    oneOf: [{ required: ['configurationUrl'] }, { required: ['configuration'] }],
    additionalProperties: false,
};
const saml2ProviderConfigSchema = {
    type: 'object',
    properties: {
        type: { type: 'string', const: config_1.AuthProviderType.SAML2 },
        title: { type: 'string' },
        issuerId: { type: 'string' },
        entityId: { type: 'string' },
        ssoUrl: { type: 'string' },
        x509PublicCert: { type: 'string' },
        teamsAttributeName: { type: 'string', default: config_1.DEFAULT_TEAM_CLAIM_NAME },
        teamsAttributeMap: { type: 'object', additionalProperties: { type: 'string' } },
        defaultTeams: { type: 'array', items: { type: 'string' } },
    },
    additionalProperties: false,
    required: ['type', 'issuerId', 'ssoUrl', 'x509PublicCert'],
};
const basicAuthProviderConfigSchema = {
    type: 'object',
    properties: {
        type: { type: 'string', const: config_1.AuthProviderType.BASIC },
        title: { type: 'string' },
        credentials: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    username: { type: 'string' },
                    password: { type: 'string' },
                    passwordHash: { type: 'string' },
                    teams: { type: 'array', items: { type: 'string' } },
                },
                required: ['username'],
                additionalProperties: false,
            },
        },
    },
    required: ['type', 'credentials'],
    additionalProperties: false,
};
const authProviderConfigSchema = {
    oneOf: [oidcProviderConfigSchema, saml2ProviderConfigSchema, basicAuthProviderConfigSchema],
    discriminator: { propertyName: 'type' },
};
exports.ssoConfigSchema = {
    type: 'object',
    additionalProperties: authProviderConfigSchema,
};
const redirectConfigSchema = {
    type: 'object',
    properties: {
        to: { type: 'string' },
        type: { type: 'number', default: 301 },
    },
    required: ['to'],
    additionalProperties: false,
};
exports.apiConfigSchema = {
    type: 'object',
    properties: {
        root: { type: 'string' },
        rbac: { type: 'object', additionalProperties: true },
        theme: {
            type: 'object',
            properties: {
                openapi: { type: 'object', additionalProperties: true },
            },
            additionalProperties: false,
        },
        title: { type: 'string' },
        metadata: { type: 'object', additionalProperties: true },
    },
    additionalProperties: true,
    required: ['root'],
};
const metadataConfigSchema = {
    type: 'object',
    additionalProperties: true,
};
const seoConfigSchema = {
    type: 'object',
    properties: {
        title: { type: 'string' },
        description: { type: 'string' },
        siteUrl: { type: 'string' },
        image: { type: 'string' },
        keywords: { type: 'array', items: { type: 'string' } },
        lang: { type: 'string' },
        jsonLd: { type: 'object' },
        meta: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: { type: 'string' },
                    content: { type: 'string' },
                },
                required: ['name', 'content'],
                additionalProperties: false,
            },
        },
    },
    additionalProperties: false,
};
const rbacScopeItemsSchema = { type: 'object', additionalProperties: { type: 'string' } };
const rbacConfigSchema = {
    type: 'object',
    properties: {
        defaults: rbacScopeItemsSchema,
    },
    additionalProperties: rbacScopeItemsSchema,
};
const graviteeAdapterConfigSchema = {
    type: 'object',
    properties: {
        type: { type: 'string', const: 'GRAVITEE' },
        apiBaseUrl: { type: 'string' },
        env: { type: 'string' },
        allowApiProductsOutsideCatalog: { type: 'boolean', default: false },
        stage: { type: 'string', default: 'non-production' },
        auth: { type: 'object', properties: { static: { type: 'string' } } },
    },
    additionalProperties: false,
    required: ['type', 'apiBaseUrl'],
};
const apigeeAdapterAuthOauth2Schema = {
    type: 'object',
    properties: {
        type: { type: 'string', const: config_1.ApigeeDevOnboardingIntegrationAuthType.OAUTH2 },
        tokenEndpoint: { type: 'string' },
        clientId: { type: 'string' },
        clientSecret: { type: 'string' },
    },
    additionalProperties: false,
    required: ['type', 'tokenEndpoint', 'clientId', 'clientSecret'],
};
const apigeeAdapterAuthServiceAccountSchema = {
    type: 'object',
    properties: {
        type: { type: 'string', const: config_1.ApigeeDevOnboardingIntegrationAuthType.SERVICE_ACCOUNT },
        serviceAccountEmail: { type: 'string' },
        serviceAccountPrivateKey: { type: 'string' },
    },
    additionalProperties: false,
    required: ['type', 'serviceAccountEmail', 'serviceAccountPrivateKey'],
};
const apigeeXAdapterConfigSchema = {
    type: 'object',
    properties: {
        type: { type: 'string', const: 'APIGEE_X' },
        apiUrl: { type: 'string' },
        stage: { type: 'string', default: 'non-production' },
        organizationName: { type: 'string' },
        ignoreApiProducts: { type: 'array', items: { type: 'string' } },
        allowApiProductsOutsideCatalog: { type: 'boolean', default: false },
        auth: {
            type: 'object',
            oneOf: [apigeeAdapterAuthOauth2Schema, apigeeAdapterAuthServiceAccountSchema],
            discriminator: { propertyName: 'type' },
        },
    },
    additionalProperties: false,
    required: ['type', 'organizationName', 'auth'],
};
const apigeeEdgeAdapterConfigSchema = Object.assign(Object.assign({}, apigeeXAdapterConfigSchema), { properties: Object.assign(Object.assign({}, apigeeXAdapterConfigSchema.properties), { type: { type: 'string', const: 'APIGEE_EDGE' } }) });
const devOnboardingAdapterConfigSchema = {
    type: 'object',
    oneOf: [apigeeXAdapterConfigSchema, apigeeEdgeAdapterConfigSchema, graviteeAdapterConfigSchema],
    discriminator: { propertyName: 'type' },
};
const devOnboardingConfigSchema = {
    type: 'object',
    required: ['adapters'],
    additionalProperties: false,
    properties: {
        adapters: {
            type: 'array',
            items: devOnboardingAdapterConfigSchema,
        },
    },
};
const responseHeaderSchema = {
    type: 'object',
    properties: {
        name: { type: 'string' },
        value: { type: 'string' },
    },
    additionalProperties: false,
    required: ['name', 'value'],
};
exports.redoclyConfigSchema = {
    type: 'object',
    properties: {
        licenseKey: { type: 'string' },
        theme: { type: 'object', default: {} },
        redirects: { type: 'object', additionalProperties: redirectConfigSchema, default: {} },
        seo: seoConfigSchema,
        rbac: rbacConfigSchema,
        responseHeaders: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: responseHeaderSchema,
            },
        },
        mockServer: {
            type: 'object',
            properties: {
                off: { type: 'boolean', default: false },
                position: { type: 'string', enum: ['first', 'last', 'replace', 'off'], default: 'first' },
                strictExamples: { type: 'boolean', default: false },
                errorIfForcedExampleNotFound: { type: 'boolean', default: false },
                description: { type: 'string' },
            },
        },
        apis: {
            type: 'object',
            additionalProperties: exports.apiConfigSchema,
        },
        sso: exports.ssoConfigSchema,
        developerOnboarding: devOnboardingConfigSchema,
        i18n: {
            type: 'object',
            properties: {
                defaultLocale: {
                    type: 'string',
                },
                locales: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            code: {
                                type: 'string',
                            },
                            name: {
                                type: 'string',
                            },
                        },
                        required: ['code'],
                    },
                },
            },
            additionalProperties: false,
            required: ['defaultLocale', 'locales'],
        },
        metadata: metadataConfigSchema,
    },
    default: {},
    additionalProperties: true,
};
exports.environmentSchema = {
    oneOf: [
        Object.assign(Object.assign({}, exports.redoclyConfigSchema), { additionalProperties: false }),
        {
            type: 'object',
            properties: {
                $ref: { type: 'string' },
            },
            required: ['$ref'],
            additionalProperties: false,
        },
    ],
};
exports.rootRedoclyConfigSchema = Object.assign(Object.assign({}, exports.redoclyConfigSchema), { properties: Object.assign(Object.assign({}, exports.redoclyConfigSchema.properties), { env: {
            type: 'object',
            additionalProperties: exports.environmentSchema,
        } }), default: {}, required: ['redirects'] });
