# -*- coding: utf-8 -*-
"""prak1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y9nj3RWALlLGQ6zbHpfxubDK8UXMHcBI
"""

import math
import pandas as pd
from sklearn.datasets import fetch_california_housing


def calc_triangle(h, b):
    return 0.5 * h * b


def calc_rectangle(a, b):
    return a * b


def calc_circle(r):
    return math.pi * (r ** 2)


def ex2():
    print("Введите номер фигуры:")
    print("(1) - треугольник")
    print("(2) - прямоугольник")
    print("(3) - круг")

    figure = int(input())
    if figure == 1:
        print("Введите высоту и основание")
        h, b = map(float, input().split())
        print('Площадь треугольника: ', calc_triangle(h, b))
    elif figure == 2:
        print("Введите высоту и ширину")
        a, b = map(float, input().split())
        print('Площадь прямоугольника: ', calc_rectangle(a, b))

    elif figure == 1:
        print("Введите радиус")
        r = float(input())
        print('Площадь круга: ', calc_circle(r))


def ex3():
    print("Введите 2 числа")
    a, b = map(float, input().split())
    print("Введите операцию: ")
    o = input()
    if o == '+':
        print("Cумма: ", a + b)
    elif o == '-':
        print("Разность: ", a - b)
    elif o == '/':
        print("Частное: ", a / b)
    elif o == '//':
        print("Целочисленное деление: ", a // b)
    elif o == 'abs':
        print("Модуль: ", abs(a), ' ', abs(b))
    elif o == 'pow' or o == '**':
        print("Степень ", a ** b)

def ex4():
    all_summ = 0
    sum_sqr = 0
    while True:
        a = float(input())
        all_summ = all_summ + a
        sum_sqr += a ** 2
        print(a, all_summ)
        if all_summ == 0:
            print("Сумма квадратов: ", sum_sqr)
            break


def ex5():
    n = int(input())
    sequence = []
    for i in range(1, n + 1):
        sequence.extend([i] * i)
    print(*sequence[:n])


def ex6():
    A = [1, 2, 3, 4, 2, 1, 3, 4, 5, 6, 5, 4, 3, 2]
    B = ['a', 'b', 'c', 'c', 'c', 'b', 'a', 'c', 'a', 'a', 'b', 'c', 'b', 'a']

    result = {}

    for a, b in zip(A, B):
        if b in result:
            result[b] += a
        else:
            result[b] = a

    print(result)


def ex7():
    # Загрузка данных
    housing_data = fetch_california_housing(as_frame=True)

    # Извлечение DataFrame и целевой переменной
    df = housing_data.frame

    # 8. Получение информации о DataFrame
    df.info()

    # 9. Проверка на пропущенные значения
    missing_values = df.isna().sum()
    print("\nПропущенные значения в каждом столбце:\n", missing_values)

    # 10. Вывод записей, где средний возраст домов > 50 лет и население > 2500 чел
    filtered_housing = df.loc[(df['HouseAge'] > 50) & (df['Population'] > 2500)]
    print("\nЗаписи с средним возрастом домов более 50 лет и населением более 2500:\n", filtered_housing)

    # 11. Узнать максимальное и минимальное значения медианной стоимости дома
    max_value = df['MedHouseVal'].max()  # Используем 'MedHouseVal' для медианной стоимости
    min_value = df['MedHouseVal'].min()
    print("\nМаксимальная медианная стоимость дома:", max_value)
    print("Минимальная медианная стоимость дома:", min_value)

    # 12. Названия признаков и их средние значения
    mean_values = df.apply(lambda x: (x.name, x.mean()))
    print("\nНазвания признаков и их средние значения:\n", mean_values)


morze = {
    'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..',
    'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',
    'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',
    'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',
    'q': '--.-', 'r': '.-.', 's': '…', 't': '-',
    'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
    'y': '-.--', 'z': '--..'
}


def encode_morse(text):
    words = text.lower().split()
    morse_code = []

    for word in words:
        encoded_word = ' '.join(morze[char] for char in word if char in morze)
        morse_code.append(encoded_word)

    return morse_code


def dopex1():
    input_text = "Ignition sequence start"
    output = encode_morse(input_text)

    for line in output:
        print(line)


def register_users(n, queries):
    database = {}
    results = []

    for name in queries:
        if name not in database:
            database[name] = 0
            results.append("OK")
        else:
            database[name] += 1
            new_name = f"{name}{database[name]}"
            while new_name in database:
                database[name] += 1
                new_name = f"{name}{database[name]}"
            database[new_name] = 0
            results.append(new_name)

    return results


def dopex2():
    n = int(input().strip())
    queries = [input().strip() for _ in range(n)]

    results = register_users(n, queries)

    for result in results:
        print(result)


def process_file_requests(n, file_permissions, m, requests):
    # Cловарь для хранения разрешений
    file_access = {}

    # Заполнение
    for line in file_permissions:
        parts = line.split()
        filename = parts[0]
        permissions = set(parts[1:])
        file_access[filename] = permissions

    results = []

    for request in requests:
        operation, filename = request.split()
        if operation == 'write':
            operation_let = 'w'
        elif operation == 'read':
            operation_let = 'r'
        elif operation == 'execute':
            operation_let = 'x'
        else:
            operation_let = 'none'

        if filename in file_access and operation_let in file_access[filename]:
            results.append("OK")
        else:
            results.append("Access denied")

    return results


def dopex3():
    n = int(input().strip())
    file_permissions = [input().strip() for _ in range(n)]
    m = int(input().strip())
    requests = [input().strip() for _ in range(m)]

    results = process_file_requests(n, file_permissions, m, requests)

    for result in results:
        print(result)


dopex3()